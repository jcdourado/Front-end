Ready:
  $(document).ready(function)
  $(function)

Method Chaining

Pegar elementos:
  $(<element>)
  $ -> final, ^ -> inicio, * -> qualquer parte
  $("input[name^='txt']").css("color", "blue");

Animações:
  .hide()
  .show()
  .toggle()

  .fadeIn() -> pode passar 'fast', 'slow', ou um tempo em INT -> pode passar um segundo parametro, que é uma função de callback para quando acabar o tempo
  .fadeOut()
  .fadeToggle() -> alterna entre o 'In' e o 'Out'
  .fadeTo(velocidade,opacidade('0.1 ate 1'))

  .slideUp() -> igual o fade
  .slideOut()
  .slideToggle()

  .animate() -> pode criar animacoes, passa o sentido e a qntd, depois um tempo se quiser
            para as animacoes funcionarem a posicao deve ser diferente de static
            pode usar o toggle em propriedades
  $("#divTestBox4").animate({ "left" : "100px" }, 1000);

  .stop() -> para uma animação, se passar true mata todas as animações
          -> se passar outro parametro true ele finaliza a animação sem esperar terminar

DOM:
  .text() -> Texto -> texto dentro do elemento
  .val() -> Value -> valor de algum input
  .html() -> HTML -> igual o Texto mas com marcacao

  Para setar um texto é so passar como parametro
  No caso do html, deve-se passar elementos : ex: <b>ola</b>

  Se passar uma funcao a estas funceoes, da para definir um retorno para os textos.
  O primeiro parametro é o index e o segundo é o texto antigo do elemento

  Atributos:
    .attr() -> pega e altera os atributos
            -> pode-se passar o atributo e o valor
            -> ou um array com os atributos e os valor
            -> pode-se passar também uma função, igual o html, ou text,
            -> mas tem que passar o atributo a ser modificado
  Classes:
    .addClass()
    .removeClass()
    .hasClass()
    .toggleClass()

  .css() -> pode passar uma propriedade e seu valor
        ou passar um array com as propriedades e valores

  .append() -> insere depois
  .prepend() -> insere antes
  .appendTo() -> insere depois de algum item
  .prependTo() -> insere antes de algum item
  pode se passar vários parametros para eles

  .before() ->  insere antes
  .after() -> insere depois
  .insertBefore() ->  insere antes
  .insertAfter() -> insere depois

  $("#spnTest3").before($("<i></i>").text("before() "));
  $("<b></b>").text("insertBefore() ").insertBefore("#spnTest3");

  Remover:
    .empty() -> tira os elementos filhos
    .remove() -> remove o elemento junto com os filhos,
            se passar um selector ele remove apenas o elemento passado
  Pais:
    .parent() -> pega os pais diretos
    .parents() -> pega todos os pais até o html, pode-se passar um parametro com o elemento desejado
    .parentsUntil() -> pega todos os pais entre o elemento dado

  Filhos:
    .children() -> pega os filhos diretos e se passar um parametro pega aqueles
    .find() -> passar um parametro pega so aqueles

  Irmaos:
    .siblings() -> pega os irmaos, se passar um parametro pega so aqueles

    .next() -> pega o proximo
    .nextAll() -> pega todos os proximos
    .nextUntil() -> pega todos ate o parametro

    .prev()
    .prevAll()
    .prevUntil()


Eventos:
  .bind() -> passar uma ação e coloca o que fazer,
            se passar uma função com um parametro, da pra pegar os dados do evento
  .unbind() -> sem nada remove todas as ações
              pode-se passar várias separando apenas com o espaço
              pode-se passar uma funcao como segundo parametro
  .live() -> pega os objetos enquanto o usuario mexe, diferente do bind que é so quando a pagina abre

Conflitos:
  Em caso de conflito chama:
    $.noConflict() -> ele retorna uma referencia pra poder trocar o "$";
    Pode passar o "$" na chamado da função do ready e usa ela internamente
